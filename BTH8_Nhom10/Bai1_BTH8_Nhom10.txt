----------------------------------------------------------------------------------
------ Bài 1 của "Bài thực hành 8" - Nhóm 10: Hiếu, Duy, Khiêm, Tài --------------
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity file_combine is
    Port (
        Clk100M, reset: in std_logic;
        data_in: in std_logic;
        button: in std_logic;
        led: out std_logic_vector(6 downto 0);
        CAT: out std_logic;
        Cout: out std_logic
     );
end file_combine;

architecture Behavioral of file_combine is
    signal tmp_done, clock: std_logic;
    signal led_1, led_2: std_logic_vector( 3 downto 0);
    signal data: std_logic_vector(7 downto 0);
begin
    A: entity work.Registor
    port map(
        baud_clk => clock,
        rst => reset,
        data_in => data,
        done => tmp_done,
        button => button,
        data_out(3 downto 0) => led_1,
        data_out(7 downto 4) => led_2,
        Cout => Cout
    );
    
    B: entity work.rx_UART
    port map(
        clk => Clk100M,
        rst => reset,
        rx_data_in => data_in,
        rx_data_out => data,
        done => tmp_done,
        div => clock
    );
    
    C: entity work.LEDS_OUT
    port map(
        A => led_1,
        B => led_2,
        reset => reset,
        Clk100M => CLk100M,
        led => led,
        CAT => CAT
    );

end Behavioral;

----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity rx_UART is
    Port ( 
        clk, rst: in std_logic;
        rx_data_in: in std_logic;
        rx_data_out: out std_logic_vector( 7 downto 0 );
        done: out std_logic ;
        div: out std_logic
    );
end rx_UART;

architecture Behavioral of rx_UART is
    type ST is ( IDLE, START, DATA, STOP );
    signal current_state: ST := IDLE;
    
    signal baud_clk: std_logic := '0';
    signal data_stored: std_logic_vector (7 downto 0);
begin
    Baud_generator: process(clk)
    variable N : integer range 0 to 651 := 0;   --651
    begin
        if(rising_edge(clk)) then
            if( rst = '0' ) then
                N := 0;
                baud_clk <= '0';
            else
                if(N = 651) then
                    baud_clk <= not baud_clk;
                    N := 0;
                else 
                    N := N + 1;
                    baud_clk <= '0';
                end if;
            end if;
        end if;
    end process;
    div <= baud_clk;
   
    
    FSM_UART_receiver: process(clk, baud_clk)
        variable sample_data: integer range 0 to 14 := 0;
        variable data_counter: integer range 0 to 7 := 0;
    begin   
        if(rising_edge(clk)) then
            if( rst = '0' ) then    
                done <= '0';
                sample_data := 0;
                data_counter := 0;
                rx_data_out <= (others => '0');
                current_state <= IDLE;
            else
                if(baud_clk = '1') then
                    case current_state is
                        when IDLE =>
                            done <= '0';
                            data_counter := 0;
                            sample_data := 0;
                            data_stored <= (others => '0');
                            if( rx_data_in = '0') then
                                current_state <= START;
                            end if;
                        when START =>
                            if( sample_data = 7 ) then
                                current_state <= DATA;
                                sample_data := 0;
                            else 
                                sample_data := sample_data + 1;
                            end if;
                        when DATA =>
                            if( sample_data = 14 ) then
                                data_stored(data_counter)<= rx_data_in;
                                sample_data := 0;
                            if(data_counter = 7 ) then
                                current_state <= STOP;
                                sample_data := 0;
                            else 
                                data_counter := data_counter + 1;
                            end if;
                            else 
                                sample_data := sample_data + 1;
                            end if;
                        when STOP => 
                            if(sample_data = 14) then
                                rx_data_out <= data_stored;
                                done <= '1';
                                current_state <= IDLE;
                            else 
                                sample_data := sample_data + 1;       
                            end if;
                        when others =>
                            current_state <= IDLE;
                    end case;
        end if;
            end if;   
                end if;                     
    end process;
end Behavioral;

----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE. std_logic_arith.ALL;
use IEEE. std_logic_unsigned.ALL;


entity Registor is
    Port ( 
        baud_clk: in std_logic;
        rst: in std_logic;
        data_in: in std_logic_vector(7 downto 0);
        done: in std_logic;
        button: in std_logic;
        data_out: out std_logic_vector(7 downto 0);
        Cout: out std_logic
    );
end Registor;

architecture Behavioral of Registor is
    type data is array(0 to 1) of std_logic_vector(7 downto 0);
    signal operator: data;
    signal count: integer range 0 to 1:= 0;
    signal sum: std_logic_vector(8 downto 0);
begin
    process(baud_clk)
    begin
        if(rst = '0') then
            operator <= (others => x"00");
        else 
            if(rising_edge(baud_clk)) then
                if(done = '1') then
                    operator(count) <= data_in;
                    count <= count + 1;
                end if;
            end if;
        end if;
    end process;
    
    process(baud_clk)
    begin
        if(rising_edge(baud_clk)) then
            if(button = '0') then
                sum <= ('0' & operator(0)) + ('0' & operator(1));
            end if;
        end if;
    end process;
    data_out <= sum(7 downto 0);
    cout <= sum(8);
end Behavioral;

