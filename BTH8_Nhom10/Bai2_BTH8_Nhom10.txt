----------------------------------------------------------------------------------
------ Bài 2 của "Bài thực hành 8" - Nhóm 10: Hiếu, Duy, Khiêm, Tài --------------
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity Combine_file is
    Port (
        Clk100M : in std_logic;
        reset: in std_logic;
        enable: in std_logic;
        data_in: in std_logic;
        led: out std_logic_vector(6 downto 0);
        CAT: out std_logic
     );
end Combine_file;

architecture Behavioral of Combine_file is
    signal tmp_done: std_logic;
    signal ascii: std_logic_vector(7 downto 0);
    signal led_1, led_2: std_logic_vector(3 downto 0);
    signal clock: std_logic;
begin
    U0: entity work.Receiver
    port map(
        clk => Clk100M, 
        rst => reset,
        done => tmp_done,
        rx_data_in => data_in,
        rx_data_out => ascii,
        div => clock
    );
    
    U1: entity work.FSM
    port map(
        Clk => clock,
        rst => reset,
        enable => enable,
        data_in => ascii,
        done => tmp_done,
        data_out(3 downto 0) => led_1,
        data_out( 7 downto 4  ) => led_2
    );
    
    U2: entity work.LEDS_OUT
    port map(
        A => led_1,
        B => led_2,
        reset => reset,
        Clk100M => Clk100M,
        led => led,
        CAT => CAT
    );
end Behavioral;

----------------------------------------------------------------------------------
--------------------------------- add LEDS_OUT -----------------------------------
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Receiver is
    Port ( 
        clk, rst: in std_logic;
        rx_data_in: in std_logic;
        rx_data_out: out std_logic_vector( 7 downto 0 );
        done: out std_logic ;
        div: out std_logic
    );
end Receiver;

architecture Behavioral of Receiver is
    type ST is ( IDLE, START, DATA, STOP );
    signal current_state: ST := IDLE;
    
    signal baud_clk: std_logic := '0';
    signal data_stored: std_logic_vector (7 downto 0);
begin
    Baud_generator: process(clk)
    variable N : integer range 0 to 651 := 0;   --651
    begin
        if(rising_edge(clk)) then
            if( rst = '0' ) then
                N := 0;
                baud_clk <= '0';
            else
                if(N = 651) then
                    baud_clk <= not baud_clk;
                    N := 0;
                else 
                    N := N + 1;
                    baud_clk <= '0';
                end if;
            end if;
        end if;
    end process;
    div <= baud_clk;
   
    
    FSM_UART_receiver: process(clk, baud_clk)
        variable sample_data: integer range 0 to 14 := 0;
        variable data_counter: integer range 0 to 7 := 0;
    begin   
        if(rising_edge(clk)) then
            if( rst = '0' ) then    
                done <= '0';
                sample_data := 0;
                data_counter := 0;
                rx_data_out <= (others => '0');
                current_state <= IDLE;
            else
                if(baud_clk = '1') then
                    case current_state is
                        when IDLE =>
                            done <= '0';
                            data_counter := 0;
                            sample_data := 0;
                            data_stored <= (others => '0');
                            if( rx_data_in = '0') then
                                current_state <= START;
                            end if;
                        when START =>
                            if( sample_data = 7 ) then
                                current_state <= DATA;
                                sample_data := 0;
                            else 
                                sample_data := sample_data + 1;
                            end if;
                        when DATA =>
                            if( sample_data = 14 ) then
                                data_stored(data_counter)<= rx_data_in;
                                sample_data := 0;
                            if(data_counter = 7 ) then
                                current_state <= STOP;
                                sample_data := 0;
                            else 
                                data_counter := data_counter + 1;
                            end if;
                            else 
                                sample_data := sample_data + 1;
                            end if;
                        when STOP => 
                            if(sample_data = 14) then
                                rx_data_out <= data_stored;
                                done <= '1';
                                current_state <= IDLE;
                            else 
                                sample_data := sample_data + 1;       
                            end if;
                        when others =>
                            current_state <= IDLE;
                    end case;
        end if;
            end if;   
                end if;                     
    end process;
end Behavioral;

----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 04/15/2025 10:25:03 AM
-- Design Name: 
-- Module Name: FSM - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity FSM is
    Port ( 
        Clk: in std_logic;
        enable: in std_logic;
        data_in: in std_logic_vector(7 downto 0);
        rst: in std_logic;
        data_out: out std_logic_vector(7 downto 0);
        done: in std_logic
    );
end FSM;

architecture Behavioral of FSM is
    
    type ST is (IDLE, ENTER, LED, RESET);
    signal current_state : ST := IDLE;
    signal baud_clk: std_logic:= '0';
    signal counter: integer range 0 to 2 := 0;
begin 

    
    process(Clk)
        constant N : integer := 768050;
        variable delay: integer range 0 to N := 0;
    begin
        if(rising_edge(clk)) then
            if(rst = '0')then
                counter <= 0;
                delay := 0;
                data_out <= (others => '0');
                current_state <= IDLE;
            else 
            --if(baud_clk = '1') then
                case current_state is
                    when IDLE =>
                        counter <= 0;
                        delay := 0;
                        if(enable = '1') then
                            current_state <= ENTER;
                        end if;
                    
                    when ENTER =>
                    if(done = '1') then
                        if(data_in = "00001101" ) then
                            if(counter = 2) then
                                current_state <= LED;
                            else 
                                counter <= counter + 1;
                            end if;
                        else
                            data_out <= data_in;
                            current_state <= IDLE;
                        end if;
                    end if;    
                         
                    when LED =>
                        if(counter = 2)then
                            data_out <= "11111111";
                            delay := 0;
                            current_state <= RESET;
                        end if;
                    
                    when RESET =>
                            if(delay = N) then
                                data_out <= (others => '0');
                                delay := 0;
                                current_state <= IDLE;
                            else
                                delay := delay + 1;
                            end if;
                    
                    when others => current_state <= IDLE;                          
                end case;
            end if;
        end if;
        --end if;
    end process;
end Behavioral;


