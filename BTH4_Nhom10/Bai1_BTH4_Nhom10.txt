----------------------------------------------------------------------------------
------ Bài 1 của "Bài thực hành 4" - Nhóm 10: Hiếu, Duy, Khiêm, Tài --------------
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
use IEEE.NUMERIC_STD.ALL;

entity FA1bit is
    Port (a,b,cin: in std_logic;
          sum,cout: out std_logic
          );
end FA1bit;
architecture Behavioral of FA1bit is
begin
    sum <= a xor b xor cin;
    cout <= (a and b) or (cin and (a xor b));
end Behavioral;


----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;

entity bai4 is
    generic (N:integer:= 4);
    Port    (a,b:in std_logic_vector(2*N-1 downto 0);
            clk,rs,load,cin:in std_logic;
            sum:out std_logic_vector(2*N-1 downto 0);
            cout,valid:out std_logic 
            );
end bai4;

architecture Behavioral of bai4 is
    component FA1bit
        Port (a,b,cin:in std_logic;
             sum,cout:out std_logic
             );
    end component;
    
    signal rega,regb,regsum   : std_logic_vector(2*N-1 downto 0);
    signal carry,s0,s1,c0,c1       : std_logic;
    signal counter        : integer range 0 to N;   
begin
    fa0: FA1bit port map (
        a=>rega(0),
        b=>regb(0),
        cin=>carry,
        sum=>s0,
        cout=>c0
        );
    fa1: FA1bit port map (
        a=> rega(1),
        B=> regb(1),
        cin=> c0,
        sum=> s1,
        cout =>c1
        );
    process(clk, rs)
    begin
        if rs = '1' then    rega<= (others => '0');
                            regb<= (others => '0');
                            regsum  <= (others => '0');
                            carry    <= cin;
                            counter  <= 0;
                            valid    <= '0';
        elsif (Clk' event and clk ='1') then
            if Load = '1' then
                                rega   <= a;
                                regb   <= b;
                                carry   <= Cin;
                                counter <= 0;
                                valid   <= '0';
            elsif counter < N then  regsum(2*counter)<= s0;
                                    regsum(2*counter + 1)<=s1;
                                    rega <= "00"&rega(2*N-1 downto 2);
                                    regb <= "00"&regb(2*N-1 downto 2);
                                    counter <= counter + 1;
                                    valid<='0';
                                    carry<=c1;
            else            valid <= '1';  
            end if;
         end if;
     end process;
     sum  <= regsum;
     cout <= carry;
end Behavioral;
